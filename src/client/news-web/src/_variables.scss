// bootstrap colors
$blue: #00aeef !default;
$indigo: #6610f2 !default;
$purple: #6f42c1 !default;
$pink: #e83e8c !default;
$red: #b82601 !default;
$orange: #fd7e14 !default;
$yellow: #eac67a !default;
$green: #76c043 !default;
$teal: #20c997 !default;
$cyan: #17a2b8 !default;
$primary-color: #6610f2 !default;
$secondary-color: #813772 !default;

// grayscale colors
$white: #fff !default;
$gray-100: #f8f9fa !default;
$gray-200: #e9ecef !default;
$gray-300: #dee2e6 !default;
$gray-400: #ced4da !default;
$gray-500: #adb5bd !default;
$gray-600: #6c757d !default;
$gray-700: #495057 !default;
$gray-800: #343a40 !default;
$gray-900: #212529 !default;
$black: #000 !default;

// bootstrap lengths override
$grid-gutter-width: 28px !default;
$font-size-base: 0.875rem;

//gradients
$light-blue: linear-gradient(to right, rgb(30, 47, 142) , rgb(47, 121, 216)) !default;

$screen-xs: 0;
$screen-xs-max: 599px;
$screen-sm: 600px;
$screen-md: 960px;
$screen-lg: 1280px;
$screen-xl: 1920px;

$primary: $primary-color;
$success: $green;
$danger: $red;
$info: #007284;

// app colors
$primary-text-color: $gray-900;
$primary-app-color: $primary-color;

// app sizes 
$app-header-height: 4rem;
$app-max-form-width: 300px;
$app-drawer-size: 240px;

$box-shadow-x: 0;
$box-shadow-x-inset: 0;
$box-shadow-y: 2px;
$box-shadow-y-inset: 0;
$box-shadow-blur: 4px;
$box-shadow-blur-inset: 10px;
$box-shadow-spread: 0;
$box-shadow-spread-inset: 0;

@mixin default-gradient-bg() {
  background: linear-gradient(to right, $primary-color, $secondary-color);
}

// mixin box-shadow: inset
@mixin leveled-box-shadow($inset: false, $level: 1, $color: $gray-200) {
  @if($inset != null and $inset == true) {
    box-shadow: inset $box-shadow-x-inset ($box-shadow-y-inset * $level) ($box-shadow-blur-inset * $level) ($box-shadow-spread-inset * $level) $color;
  }
  @else {
    box-shadow: $box-shadow-x ($box-shadow-y * $level) ($box-shadow-blur * $level) ($box-shadow-spread * $level) $color;
  }
}

@mixin pulsing($color: $blue) {
  &:before {
    content: '';
    position: relative;
    display: block;
    width: 300%;
    height: 300%;
    box-sizing: border-box;
    margin-left: -100%;
    margin-top: -100%;
    border-radius: 100%;
    background-color: $color;
    animation: pulse-ring 1.25s cubic-bezier(0.215, 0.61, 0.355, 1) infinite;
  }
}

@mixin text-shadow {
  text-shadow: 0px 3px 5px rgba(150, 150, 150, 0.75);
}

// mixin mediaqueries: breakpoint value;
@mixin media($point: xs, $isLandscape: false) {
  @if ($point == xl and $isLandscape == false) {
    @media screen and (min-width: $screen-xl) {
      @content;
    }
  }
  @else if ($point == xl and $isLandscape == true) {
    @media screen and (min-width: $screen-xl) and (orientation: landscape) {
      @content;
    }
  }

  @if ($point == lg and $isLandscape == false) {
    @media screen and (min-width: $screen-lg) {
      @content;
    }
  }
  @else if ($point == lg and $isLandscape == true) {
    @media screen and (min-width: $screen-lg) and (orientation: landscape) {
      @content;
    }
  }

  @if ($point == md and $isLandscape == false) {
    @media screen and (min-width: $screen-md) {
      @content;
    }
  }
  @else if ($point == md and $isLandscape == true) {
    @media screen and (min-width: $screen-md) and (orientation: landscape) {
      @content;
    }
  }

  @if ($point == sm and $isLandscape == false) {
    @media screen and (min-width: $screen-sm) {
      @content;
    }
  }
  @else if ($point == sm and $isLandscape == true) {
    @media screen and (min-width: $screen-sm) and (orientation: landscape) {
      @content;
    }
  }
  @else if ($point == xs and $isLandscape == false) {
    @media screen and (max-width: $screen-xs-max) {
      @content;
    }
  }
  @else if($point == xs and $isLandscape == true) {
    @media screen and (max-width: $screen-xs-max) and (orientation: landscape) {
      @content;
    }
  }
}

// mixin ellipsis text
@mixin ellipsis-text {
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
}

// mixin center
@mixin center {
  margin: 0 auto;
  text-align: center;
}

// mixin for active element
@mixin active-element {
  transition: all 0.4s ease-in-out;

  &.active {
    @content;
  }

  &[disabled] {
    &:hover, &:focus, &:active, &:active:focus, &:active:hover, &:hover:focus {
      @content;
    }
  }

  &:hover, &:focus, &:active, &:active:focus, &:active:hover, &:hover:focus {
    @content;
  }
}

@mixin background-opacity($color, $opacity: 0.3) {
  background: $color; /* The Fallback */
  background: rgba($color, $opacity);
}

// mixin vertical align
@mixin vertical-align ($alignment: 50%) {
  position: relative;
  top: $alignment;
  transform: translateY(-$alignment);
}

// mixin vertical and horizontal align
@mixin xy-align {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

@mixin sh-button {
  display: inline-block;
  font-weight: 400;
  text-align: center;
  white-space: nowrap;
  vertical-align: middle;
  user-select: none;
  border: 1px solid transparent;
  padding: 0.375rem 0.75rem;
  font-size: 1rem;
  line-height: 1.5;
  border-radius: 0.25rem;
}

@keyframes pulse-ring {
  0% {
    transform: scale(0.33);
  }
  80%, 100% {
    opacity: 0;
  }
}

@keyframes pulse-dot {
  0% {
    transform: scale(0.8);
  }
  50% {
    transform: scale(1);
  }
  100% {
    transform: scale(0.8);
  }
}

$base-background-color: $gray-100;
